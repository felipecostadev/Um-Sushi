name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Fazer checkout do reposit√≥rio
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Verifica√ß√£o de seguran√ßa
        run: |
          echo "üîé Executando verifica√ß√£o de seguran√ßa com npm audit..."
          npm audit --json > npm-audit.json || true
          
          # Verificando vulnerabilidades cr√≠ticas ou altas
          HIGH_COUNT=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' npm-audit.json || echo "0")
          CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' npm-audit.json || echo "0")
          
          echo "Vulnerabilidades encontradas: $CRITICAL_COUNT cr√≠ticas, $HIGH_COUNT altas"
          
          # Falha se existirem vulnerabilidades cr√≠ticas
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Erro: Foram encontradas $CRITICAL_COUNT vulnerabilidades cr√≠ticas"
            echo "Detalhes das vulnerabilidades cr√≠ticas:"
            jq '.vulnerabilities[] | select(.severity == "critical")' npm-audit.json
            exit 1
          fi
          
          # Aviso se existirem vulnerabilidades altas, mas continua o pipeline
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Aviso: Foram encontradas $HIGH_COUNT vulnerabilidades altas"
            echo "Detalhes das vulnerabilidades altas:"
            jq '.vulnerabilities[] | select(.severity == "high")' npm-audit.json
          fi
          
          echo "‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da"  

      - name: Testes unit√°rios do Frontend
        run: |
          echo "üß™ Executando testes unit√°rios do frontend com gera√ß√£o de cobertura..."
          
          npm test -- --coverage
          
          
          if [ -d "coverage" ]; then
            
            if [ -f "coverage/coverage-summary.json" ]; then
              COVERAGE_FILE="coverage/coverage-summary.json"
              COVERAGE_TOTAL=$(cat $COVERAGE_FILE | grep -o '"lines":{"total":[0-9],"covered":[0-9],"skipped":[0-9],"pct":[0-9.]' | grep -o 'pct":[0-9.]' | grep -o '[0-9.]')
            
            elif [ -f "coverage/coverage-final.json" ]; then
              COVERAGE_FILE="coverage/coverage-final.json"
              COVERAGE_LINES=$(jq '.total.lines.covered' coverage/coverage-final.json 2>/dev/null || echo "0")
              COVERAGE_TOTAL_LINES=$(jq '.total.lines.total' coverage/coverage-final.json 2>/dev/null || echo "1")
              COVERAGE_TOTAL=$(echo "scale=2; ($COVERAGE_LINES / $COVERAGE_TOTAL_LINES) * 100" | bc -l)
            
            elif [ -f "coverage/lcov-report/index.html" ]; then
              COVERAGE_TOTAL=$(grep -o 'Lines.%' coverage/lcov-report/index.html | grep -o '[0-9.]')
           
            elif [ -f "coverage/index.html" ]; then
              COVERAGE_TOTAL=$(grep -o 'Lines.%' coverage/index.html | grep -o '[0-9.]')
            
            elif [ -f "coverage/index.html" ]; then
              COVERAGE_TOTAL=$(grep -o 'Lines.%' coverage/index.html | grep -o '[0-9.]')
            
            elif [ -f "coverage-summary.txt" ]; then
              COVERAGE_TOTAL=$(grep -o 'Lines.%' coverage-summary.txt | grep -o '[0-9.]')
            else
              echo "‚ùå Erro: N√£o foi poss√≠vel encontrar um relat√≥rio de cobertura conhecido"
              echo "Por favor, verifique a configura√ß√£o dos testes para gerar relat√≥rios de cobertura"
              exit 1
            fi
            
            echo "üìä Cobertura de linhas de c√≥digo: $COVERAGE_TOTAL%"
            
            
            if (( $(echo "$COVERAGE_TOTAL < 75" | bc -l) )); then
              echo "‚ùå Erro: Cobertura de testes abaixo do limite m√≠nimo de 75% (atual: $COVERAGE_TOTAL%)"
              exit 1
            else
              echo "‚úÖ Cobertura de testes aprovada: $COVERAGE_TOTAL% (m√≠nimo: 75%)"
            fi
          else
            echo "‚ùå Erro: Diret√≥rio de cobertura n√£o encontrado"
            echo "Certifique-se de que seus testes est√£o configurados para gerar relat√≥rios de cobertura"
            exit 1
          fi

      - name: Buildando o frontend
        run: npm run build

      - name: Executando Lint
        run: |
          # Executando ESLint com limite de 5 warnings
          npx eslint --max-warnings=5 "src/**/*.{js,jsx,ts,tsx}" -f json > eslint-results.json || true
          
          # Contando o n√∫mero de warnings
          WARNING_COUNT=$(jq '[.[] | select(.severity == 1)] | length' eslint-results.json)
          echo "Total de warnings encontrados: $WARNING_COUNT"
          
          # Checando se o n√∫mero de warnings excede o limite
          if [ "$WARNING_COUNT" -gt 5 ]; then
            echo "‚ùå Erro: Foram encontrados $WARNING_COUNT warnings, excedendo o limite permitido de 5"
            exit 1
          else
            echo "‚úÖ Sucesso: Foram encontrados $WARNING_COUNT warnings, dentro do limite permitido de 5"
          fi